[{"path":"https://rightsz.github.io/xvm/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 gluedocking authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rightsz.github.io/xvm/articles/quick_start.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Quick Start","text":"using gluedocking, need configure environment specifying paths required external tools: store paths R environment file, need run .","code":"library(gluedocking) prepare_for_gluedocking(   python_path = \"/your_path/autodock/python.exe\",   prepare_receptor_script = \"/your_path/autodock/Lib/site-packages/AutoDockTools/Utilities24/prepare_receptor4.py\",   prepare_ligand_script = \"/your_path/autodock/Lib/site-packages/AutoDockTools/Utilities24/prepare_ligand4.py\",   prepare_split_alt_script = \"/your_path/autodock/Lib/site-packages/AutoDockTools/Utilities24/prepare_pdb_split_alt_confs.py\",   obabel_path = \"/your_path/obabel.exe\",   vina_path = \"/your_path/qvinaw.exe\" )"},{"path":[]},{"path":"https://rightsz.github.io/xvm/articles/quick_start.html","id":"download-receptor-structures","dir":"Articles","previous_headings":"Usage Examples","what":"1. Download Receptor Structures","title":"Quick Start","text":"First, need obtain receptor (protein) structures. download_receptor function retrieves PDB files RCSB Protein Data Bank. step downloads 3D structures proteins serve receptors (targets) docking experiments. PDB files contain atomic coordinates protein structures determined experimental methods like X-ray crystallography NMR.","code":"# Download PDB files from RCSB PDB database pdb_files <- download_receptor(c(\"1iep\", \"4hg7\"), out_dir = \"receptors\")"},{"path":"https://rightsz.github.io/xvm/articles/quick_start.html","id":"download-ligand-structures","dir":"Articles","previous_headings":"Usage Examples","what":"2. Download Ligand Structures","title":"Quick Start","text":"Next, need small molecules (ligands) dock receptors. download_ligand function retrieves chemical structures PubChem. step obtains 3D structures small molecules docked binding sites receptor proteins. compounds potential drug candidates known drugs want study binding interactions.","code":"# Download ligand structures from PubChem ligand_files <- download_ligand(c(\"2244\", \"5090\"), out_dir = \"ligands\")"},{"path":"https://rightsz.github.io/xvm/articles/quick_start.html","id":"prepare-receptor-files","dir":"Articles","previous_headings":"Usage Examples","what":"3. Prepare Receptor Files","title":"Quick Start","text":"Raw PDB files often contain elements need removed modified docking. ’ll process several steps: steps prepare receptor structures docking: trim_receptor removes non-protein atoms like water molecules, ions, co-crystallized ligands split_alt handles alternate conformations amino acid side chains, keeping primary () conformation prepare_receptor converts cleaned PDB files PDBQT format, adding partial charges atom types required AutoDock Vina","code":"# Step 1: Remove non-protein atoms (water, ligands, etc.) trimmed_files<-trim_receptor(\"./receptors/\", output_dir = \"trimmed\")  # Step 2: Split alternate conformations (if present) pbd_files<-split_alt(   inputs = trimmed_files,   out_dir = \"split_alt\",   keep_label = \"A\"  # Keep only the \"A\" conformation ) # Step 3: Convert PDB files to PDBQT format for docking receptor_pdbqt <- prepare_receptor(   pbd_files,   out_dir = \"prepared_receptors\" )"},{"path":"https://rightsz.github.io/xvm/articles/quick_start.html","id":"prepare-ligand-files","dir":"Articles","previous_headings":"Usage Examples","what":"4. Prepare Ligand Files","title":"Quick Start","text":"Ligands also need prepared docking: steps prepare ligand structures: convert_molecule converts downloaded structures MOL2 format using OpenBabel prepare_ligand converts MOL2 files PDBQT format, adding partial charges, atom types, setting rotatable bonds","code":"# Step 1: Convert SDF files to MOL2 format converted_files <- convert_molecule(   input_file = \"./ligands/\",   output_format = \"mol2\",   output_dir = \"./ligands_mol2/\" )  # Step 2: Convert ligand files to PDBQT format for docking ligand_pdbqt <- prepare_ligand(   converted_files,   out_dir = \"prepared_ligands\" )"},{"path":"https://rightsz.github.io/xvm/articles/quick_start.html","id":"calculate-docking-box-parameters","dir":"Articles","previous_headings":"Usage Examples","what":"5. Calculate Docking Box Parameters","title":"Quick Start","text":"docking, need define search space (docking box) ligand positioned: step analyzes receptor structures determine optimal dimensions center coordinates docking box. padding parameter adds extra space around protein ensure entire binding site included search space.","code":"# Determine appropriate docking box dimensions and center coordinates box_params <- calculate_box(split_files, padding = 5) print(box_params)"},{"path":"https://rightsz.github.io/xvm/articles/quick_start.html","id":"generate-configuration-files","dir":"Articles","previous_headings":"Usage Examples","what":"6. Generate Configuration Files","title":"Quick Start","text":"Now ’ll create configuration files AutoDock Vina: step generates configuration files specify parameters docking runs, including: Paths receptor ligand files Docking box center dimensions Search exhaustiveness (higher values give thorough slower searches)","code":"# Create configuration files for each receptor-ligand pair config_files <- write_configs(   receptor_paths = receptor_pdbqt,   ligand_paths = ligand_pdbqt,   box_df = box_params,   out_dir = \"configs\",   exhaustiveness = 8,  # Search thoroughness )"},{"path":"https://rightsz.github.io/xvm/articles/quick_start.html","id":"run-docking","dir":"Articles","previous_headings":"Usage Examples","what":"7. Run Docking","title":"Quick Start","text":"Now ’re ready perform actual docking simulations: step executes AutoDock Vina perform docking simulations receptor-ligand pairs. docking algorithm searches optimal binding poses scores based estimated binding affinity. Using multiple CPU cores can significantly speed process.","code":"# Run molecular docking using AutoDock Vina results <- run_vina(   config_paths = \"configs\",   out_dir = \"docked\",   log_dir = \"logs\",   cpu = 4  # Use 4 CPU cores )"},{"path":"https://rightsz.github.io/xvm/articles/quick_start.html","id":"check-and-rerun-failed-docking-jobs","dir":"Articles","previous_headings":"Usage Examples","what":"8. Check and Rerun Failed Docking Jobs","title":"Quick Start","text":"Sometimes docking jobs may fail, can check rerun : step examines log files identify failed docking runs automatically reruns . ensures receptor-ligand pairs successfully processed.","code":"# Check log files and rerun any failed docking jobs check_logs(   logs = \"logs\",   out = \"docked\",   config_paths = \"configs\" )"},{"path":"https://rightsz.github.io/xvm/articles/quick_start.html","id":"parse-docking-results","dir":"Articles","previous_headings":"Usage Examples","what":"9. Parse Docking Results","title":"Quick Start","text":"Finally, ’ll analyze docking results: step extracts organizes docking results log files, including: Binding affinities (lower values indicate stronger binding) Receptor ligand identifiers Ranking binding poses","code":"# Parse all log files and combine results results_df <- parse_logs(log_dir = \"logs\")  # View top binding poses sorted by binding affinity top_results <- head(results_df[order(results_df$affinity_kcalmol), ]) print(top_results)  # Save results to CSV file write.csv(results_df, \"docking_results.csv\", row.names = FALSE)"},{"path":"https://rightsz.github.io/xvm/articles/quick_start.html","id":"direct-docking-mode","dir":"Articles","previous_headings":"Usage Examples","what":"Direct Docking Mode","title":"Quick Start","text":"can also run docking directly without configuration files:","code":"run_vina(   receptor = \"receptor.pdbqt\",   ligand = \"ligand.pdbqt\",   center = c(0, 0, 0),   size = c(20, 20, 20),   exhaustiveness = 8 )"},{"path":"https://rightsz.github.io/xvm/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Beihao Li. Author, maintainer.","code":""},{"path":"https://rightsz.github.io/xvm/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Li B (2025). gluedocking: Molecular Docking Automation Tools Drug Discovery. R package version 0.1.0.","code":"@Manual{,   title = {gluedocking: Molecular Docking Automation Tools for Drug Discovery},   author = {Beihao Li},   year = {2025},   note = {R package version 0.1.0}, }"},{"path":[]},{"path":"https://rightsz.github.io/xvm/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Molecular Docking Automation Tools for Drug Discovery","text":"gluedocking R package designed streamline molecular docking workflows. provides comprehensive set functions downloading protein ligand structures, preparing docking files, running AutoDock Vina docking calculations, analyzing docking results. package wraps common molecular docking tools, enabling researchers efficiently perform virtual screening drug discovery studies within R environment.","code":""},{"path":"https://rightsz.github.io/xvm/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Molecular Docking Automation Tools for Drug Discovery","text":"Download protein structures RCSB PDB database Download ligand structures PubChem database Prepare receptor ligand files using AutoDock Tools Convert molecular file formats using OpenBabel Automatically calculate docking box parameters Generate AutoDock Vina configuration files Run molecular docking calculations Parse analyze docking results Find https://github.com/RightSZ/gluedocking","code":""},{"path":[]},{"path":"https://rightsz.github.io/xvm/index.html","id":"prerequisites","dir":"","previous_headings":"Installation","what":"Prerequisites","title":"Molecular Docking Automation Tools for Drug Discovery","text":"using gluedocking, need install several external tools: Python - Required running AutoDock Tools scripts MGLTools - Contains prepare_receptor4.py prepare_ligand4.py scripts OpenBabel - molecular file format conversion AutoDock Vina - molecular docking calculations can install development version gluedocking GitHub :","code":"# Install the development version from GitHub if(!require(devtools)) install.packages(\"devtools\") devtools::install_github(\"RightSZ/gluedocking\")"},{"path":"https://rightsz.github.io/xvm/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Molecular Docking Automation Tools for Drug Discovery","text":"package licensed MIT License. See LICENSE file details.","code":""},{"path":"https://rightsz.github.io/xvm/reference/calculate_box.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate docking box parameters from PDB structures — calculate_box","title":"Calculate docking box parameters from PDB structures — calculate_box","text":"function analyzes PDB files determine appropriate docking box dimensions center coordinates based protein structure.","code":""},{"path":"https://rightsz.github.io/xvm/reference/calculate_box.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate docking box parameters from PDB structures — calculate_box","text":"","code":"calculate_box(pdb_files, padding = 5)"},{"path":"https://rightsz.github.io/xvm/reference/calculate_box.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate docking box parameters from PDB structures — calculate_box","text":"pdb_files Character vector paths PDB files padding Numeric, additional padding add around protein Angstroms, default 5","code":""},{"path":"https://rightsz.github.io/xvm/reference/calculate_box.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate docking box parameters from PDB structures — calculate_box","text":"Data frame containing file names, center coordinates (x,y,z) box dimensions (x,y,z)","code":""},{"path":"https://rightsz.github.io/xvm/reference/calculate_box.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate docking box parameters from PDB structures — calculate_box","text":"","code":"if (FALSE) { # \\dontrun{ box_params <- calculate_box(pdb_files, padding = 5) } # }"},{"path":"https://rightsz.github.io/xvm/reference/check_logs.html","id":null,"dir":"Reference","previous_headings":"","what":"Check docking log files and rerun failed docking jobs — check_logs","title":"Check docking log files and rerun failed docking jobs — check_logs","text":"Check docking log files rerun failed docking jobs","code":""},{"path":"https://rightsz.github.io/xvm/reference/check_logs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check docking log files and rerun failed docking jobs — check_logs","text":"","code":"check_logs(   logs = \"logs\",   out = \"docked\",   config_paths = NULL,   vina_path = NULL,   seed = 12345,   cpu = NULL,   force = FALSE )"},{"path":"https://rightsz.github.io/xvm/reference/check_logs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check docking log files and rerun failed docking jobs — check_logs","text":"logs Character, directory containing log files, default \"logs\" Character, output directory docked files, default \"docked\" config_paths Character vector paths config files directories containing config files vina_path Character, path vina executable, default \"vina\" seed Integer, random seed reproducibility, default 12345 cpu Integer, number CPU cores use parallel computation, default NULL (auto-detect) force Logical, whether force rerun jobs regardless log status, default FALSE","code":""},{"path":"https://rightsz.github.io/xvm/reference/check_logs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check docking log files and rerun failed docking jobs — check_logs","text":"Character vector rerun log files","code":""},{"path":"https://rightsz.github.io/xvm/reference/check_logs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check docking log files and rerun failed docking jobs — check_logs","text":"","code":"if (FALSE) { # \\dontrun{ # Check log files and rerun any failed docking jobs check_logs(   logs = \"logs\",   out = \"docked\",   config_paths = \"configs\" ) } # }"},{"path":"https://rightsz.github.io/xvm/reference/collect_pdb_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect PDB files from input paths — collect_pdb_files","title":"Collect PDB files from input paths — collect_pdb_files","text":"Collect PDB files input paths","code":""},{"path":"https://rightsz.github.io/xvm/reference/collect_pdb_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect PDB files from input paths — collect_pdb_files","text":"","code":"collect_pdb_files(inputs)"},{"path":"https://rightsz.github.io/xvm/reference/collect_pdb_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect PDB files from input paths — collect_pdb_files","text":"inputs Character vector file paths directories","code":""},{"path":"https://rightsz.github.io/xvm/reference/collect_pdb_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collect PDB files from input paths — collect_pdb_files","text":"Character vector PDB file paths","code":""},{"path":"https://rightsz.github.io/xvm/reference/convert_molecule.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert molecule file formats using OpenBabel — convert_molecule","title":"Convert molecule file formats using OpenBabel — convert_molecule","text":"function converts molecular structure files different formats using OpenBabel chemical toolbox. supports converting single file, multiple files, files directory.","code":""},{"path":"https://rightsz.github.io/xvm/reference/convert_molecule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert molecule file formats using OpenBabel — convert_molecule","text":"","code":"convert_molecule(   input_file,   input_format = NULL,   output_file = NULL,   output_format = NULL,   output_dir = \"converted\",   pattern = NULL,   recursive = FALSE,   obabel_path = NULL )"},{"path":"https://rightsz.github.io/xvm/reference/convert_molecule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert molecule file formats using OpenBabel — convert_molecule","text":"input_file Character, path input molecule file, character vector file paths, directory containing molecule files convert input_format Character, format input file, default NULL (auto-detect file extension) output_file Character, path output file, default NULL (auto-generate based input file name) output_format Character, format output file, default NULL (auto-detect output file extension) output_dir Character, directory save output files, default converted pattern Character, file pattern match input_file directory, default NULL (files) recursive Logical, whether search recursively directories, default FALSE obabel_path Character, path OpenBabel executable, default NULL (uses GLUEDOCK_OBABEL_PATH environment variable)","code":""},{"path":"https://rightsz.github.io/xvm/reference/convert_molecule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert molecule file formats using OpenBabel — convert_molecule","text":"Character vector paths successfully converted files, NULL conversion failed","code":""},{"path":"https://rightsz.github.io/xvm/reference/convert_molecule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert molecule file formats using OpenBabel — convert_molecule","text":"","code":"if (FALSE) { # \\dontrun{ # Convert a single file convert_molecule(\"ligand.sdf\", output_format = \"mol2\") } # }"},{"path":"https://rightsz.github.io/xvm/reference/download_ligand.html","id":null,"dir":"Reference","previous_headings":"","what":"Download ligand structures from PubChem — download_ligand","title":"Download ligand structures from PubChem — download_ligand","text":"function downloads chemical compound structures PubChem database using CIDs.","code":""},{"path":"https://rightsz.github.io/xvm/reference/download_ligand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download ligand structures from PubChem — download_ligand","text":"","code":"download_ligand(cids, out_dir = \"ligands\", verify_ssl = TRUE)"},{"path":"https://rightsz.github.io/xvm/reference/download_ligand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download ligand structures from PubChem — download_ligand","text":"cids Character vector PubChem Compound IDs (CIDs) download out_dir Character, output directory downloaded files, default \"ligands\" verify_ssl Logical, whether verify SSL certificates, default TRUE","code":""},{"path":"https://rightsz.github.io/xvm/reference/download_ligand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download ligand structures from PubChem — download_ligand","text":"List successfully downloaded file paths","code":""},{"path":"https://rightsz.github.io/xvm/reference/download_ligand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download ligand structures from PubChem — download_ligand","text":"","code":"if (FALSE) { # \\dontrun{ files <- download_ligand(c(\"2244\", \"5090\"), out_dir = \"compounds\") } # }"},{"path":"https://rightsz.github.io/xvm/reference/download_receptor.html","id":null,"dir":"Reference","previous_headings":"","what":"Download PDB files from RCSB PDB database — download_receptor","title":"Download PDB files from RCSB PDB database — download_receptor","text":"function downloads PDB files RCSB Protein Data Bank using PDB IDs.","code":""},{"path":"https://rightsz.github.io/xvm/reference/download_receptor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download PDB files from RCSB PDB database — download_receptor","text":"","code":"download_receptor(pdb_ids, out_dir = \"./\", verify_ssl = TRUE)"},{"path":"https://rightsz.github.io/xvm/reference/download_receptor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download PDB files from RCSB PDB database — download_receptor","text":"pdb_ids Character vector PDB IDs download out_dir Character, output directory downloaded files, default \"./\" verify_ssl Logical, whether verify SSL certificates, default TRUE","code":""},{"path":"https://rightsz.github.io/xvm/reference/download_receptor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download PDB files from RCSB PDB database — download_receptor","text":"List successfully downloaded file paths","code":""},{"path":"https://rightsz.github.io/xvm/reference/download_receptor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download PDB files from RCSB PDB database — download_receptor","text":"","code":"if (FALSE) { # \\dontrun{ files <- download_receptor(c(\"1iep\", \"4hg7\"), out_dir = \"receptors\") } # }"},{"path":"https://rightsz.github.io/xvm/reference/has_alternate_locations.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if PDB file contains alternate locations — has_alternate_locations","title":"Check if PDB file contains alternate locations — has_alternate_locations","text":"Check PDB file contains alternate locations","code":""},{"path":"https://rightsz.github.io/xvm/reference/has_alternate_locations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if PDB file contains alternate locations — has_alternate_locations","text":"","code":"has_alternate_locations(pdb_file)"},{"path":"https://rightsz.github.io/xvm/reference/has_alternate_locations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if PDB file contains alternate locations — has_alternate_locations","text":"pdb_file Path PDB file","code":""},{"path":"https://rightsz.github.io/xvm/reference/has_alternate_locations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if PDB file contains alternate locations — has_alternate_locations","text":"Logical indicating alternate locations exist","code":""},{"path":"https://rightsz.github.io/xvm/reference/parse_logs.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse all log files in a directory and combine results — parse_logs","title":"Parse all log files in a directory and combine results — parse_logs","text":"Parse log files directory combine results","code":""},{"path":"https://rightsz.github.io/xvm/reference/parse_logs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse all log files in a directory and combine results — parse_logs","text":"","code":"parse_logs(log_folder = \"logs\", pattern = \"\\\\.txt$\", verbose = TRUE)"},{"path":"https://rightsz.github.io/xvm/reference/parse_logs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse all log files in a directory and combine results — parse_logs","text":"log_folder Character, path directory containing log files, default \"logs\" pattern Character, pattern match log files, default \"\\.txt$\" verbose Logical, whether print detailed messages, default TRUE","code":""},{"path":"https://rightsz.github.io/xvm/reference/parse_logs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse all log files in a directory and combine results — parse_logs","text":"data frame containing combined docking results log files","code":""},{"path":"https://rightsz.github.io/xvm/reference/parse_logs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse all log files in a directory and combine results — parse_logs","text":"","code":"if (FALSE) { # \\dontrun{ # Parse all log files and combine results results <- parse_logs(log_folder = \"logs\") } # }"},{"path":"https://rightsz.github.io/xvm/reference/parse_qvina_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse QVina docking log files — parse_qvina_log","title":"Parse QVina docking log files — parse_qvina_log","text":"function extracts docking results QVina log files, including binding affinities RMSD values docking pose.","code":""},{"path":"https://rightsz.github.io/xvm/reference/parse_qvina_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse QVina docking log files — parse_qvina_log","text":"","code":"parse_qvina_log(file_path)"},{"path":"https://rightsz.github.io/xvm/reference/parse_qvina_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse QVina docking log files — parse_qvina_log","text":"file_path Character, path QVina log file","code":""},{"path":"https://rightsz.github.io/xvm/reference/parse_qvina_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse QVina docking log files — parse_qvina_log","text":"Data frame containing docking results columns mode, affinity (kcal/mol), RMSD values, NULL parsing fails","code":""},{"path":"https://rightsz.github.io/xvm/reference/parse_qvina_log.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse QVina docking log files — parse_qvina_log","text":"","code":"if (FALSE) { # \\dontrun{ results <- parse_qvina_log(\"docking_results.txt\") } # }"},{"path":"https://rightsz.github.io/xvm/reference/prepare_for_gluedocking.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure environment for GlueDocking — prepare_for_gluedocking","title":"Configure environment for GlueDocking — prepare_for_gluedocking","text":"function sets necessary environment variables GlueDocking checking storing paths required external tools R environment file.","code":""},{"path":"https://rightsz.github.io/xvm/reference/prepare_for_gluedocking.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure environment for GlueDocking — prepare_for_gluedocking","text":"","code":"prepare_for_gluedocking(   python_path = NULL,   prepare_receptor_script = NULL,   prepare_ligand_script = NULL,   prepare_split_alt_script = NULL,   obabel_path = NULL,   vina_path = NULL,   force = FALSE )"},{"path":"https://rightsz.github.io/xvm/reference/prepare_for_gluedocking.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure environment for GlueDocking — prepare_for_gluedocking","text":"python_path Character, path Python executable prepare_receptor_script Character, path prepare_receptor4.py script prepare_ligand_script Character, path prepare_ligand4.py script prepare_split_alt_script Character, path prepare_pdb_split_alt_confs.py script obabel_path Character, path OpenBabel executable vina_path Character, path AutoDock Vina executable force Logical, whether overwrite existing environment variables, default FALSE","code":""},{"path":"https://rightsz.github.io/xvm/reference/prepare_for_gluedocking.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure environment for GlueDocking — prepare_for_gluedocking","text":"Invisibly returns TRUE setup successful","code":""},{"path":"https://rightsz.github.io/xvm/reference/prepare_for_gluedocking.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Configure environment for GlueDocking — prepare_for_gluedocking","text":"","code":"if (FALSE) { # \\dontrun{ prepare_for_gluedocking(   python_path = \"C:/Python39/python.exe\",   prepare_receptor_script = \"C:/MGLTools/scripts/prepare_receptor4.py\",   prepare_ligand_script = \"C:/MGLTools/scripts/prepare_ligand4.py\",   prepare_split_alt_script = \"C:/MGLTools/scripts/prepare_pdb_split_alt_confs.py\",   obabel_path = \"C:/OpenBabel/bin/obabel.exe\",   vina_path = \"C:/AutoDock_Vina/vina.exe\" ) } # }"},{"path":"https://rightsz.github.io/xvm/reference/prepare_ligand.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare ligand files for molecular docking — prepare_ligand","title":"Prepare ligand files for molecular docking — prepare_ligand","text":"function processes molecule files prepare molecular docking converting PDBQT format using AutoDock Tools scripts.","code":""},{"path":"https://rightsz.github.io/xvm/reference/prepare_ligand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare ligand files for molecular docking — prepare_ligand","text":"","code":"prepare_ligand(   mol_files,   out_dir = \"./\",   python_path = NULL,   prepare_script = NULL,   add_opts = \"-A hydrogens\" )"},{"path":"https://rightsz.github.io/xvm/reference/prepare_ligand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare ligand files for molecular docking — prepare_ligand","text":"mol_files Character vector paths molecule files (SDF, MOL, etc.) out_dir Character, output directory prepared files, default \"./\" python_path Character, path Python executable, default \"python\" prepare_script Character, path prepare_ligand4.py script add_opts Character, additional options pass prepare_ligand4.py, default \"-hydrogens\"","code":""},{"path":"https://rightsz.github.io/xvm/reference/prepare_ligand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare ligand files for molecular docking — prepare_ligand","text":"Character vector paths successfully prepared PDBQT files","code":""},{"path":"https://rightsz.github.io/xvm/reference/prepare_ligand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare ligand files for molecular docking — prepare_ligand","text":"","code":"if (FALSE) { # \\dontrun{ pdbqt_files <- prepare_ligand(sdf_files,                               out_dir = \"prepared\",                               prepare_script = \"path/to/prepare_ligand4.py\") } # }"},{"path":"https://rightsz.github.io/xvm/reference/prepare_ligand2.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare ligand files for molecular docking — prepare_ligand2","title":"Prepare ligand files for molecular docking — prepare_ligand2","text":"function processes molecule files prepare molecular docking converting PDBQT format using AutoDock Tools scripts.","code":""},{"path":"https://rightsz.github.io/xvm/reference/prepare_ligand2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare ligand files for molecular docking — prepare_ligand2","text":"","code":"prepare_ligand2(   mol_files,   out_dir = \"./\",   python_path = NULL,   prepare_script = NULL,   add_opts = \"-A hydrogens\" )"},{"path":"https://rightsz.github.io/xvm/reference/prepare_ligand2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare ligand files for molecular docking — prepare_ligand2","text":"mol_files Character vector paths molecule files (SDF, MOL, etc.) out_dir Character, output directory prepared files, default \"./\" python_path Character, path Python executable, default \"python\" prepare_script Character, path prepare_ligand4.py script add_opts Character, additional options pass prepare_ligand4.py, default \"-hydrogens\"","code":""},{"path":"https://rightsz.github.io/xvm/reference/prepare_ligand2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare ligand files for molecular docking — prepare_ligand2","text":"Character vector paths successfully prepared PDBQT files","code":""},{"path":"https://rightsz.github.io/xvm/reference/prepare_ligand2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare ligand files for molecular docking — prepare_ligand2","text":"","code":"if (FALSE) { # \\dontrun{ pdbqt_files <- prepare_ligand(sdf_files,                               out_dir = \"prepared\",                               prepare_script = \"path/to/prepare_ligand4.py\") } # }"},{"path":"https://rightsz.github.io/xvm/reference/prepare_receptor.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare receptor PDB files for molecular docking — prepare_receptor","title":"Prepare receptor PDB files for molecular docking — prepare_receptor","text":"function processes PDB files prepare molecular docking converting PDBQT format using AutoDock Tools scripts.","code":""},{"path":"https://rightsz.github.io/xvm/reference/prepare_receptor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare receptor PDB files for molecular docking — prepare_receptor","text":"","code":"prepare_receptor(   pdb_files,   out_dir = \"./\",   python_path = NULL,   prepare_script = NULL,   add_opts = \"-A hydrogens\" )"},{"path":"https://rightsz.github.io/xvm/reference/prepare_receptor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare receptor PDB files for molecular docking — prepare_receptor","text":"pdb_files Character vector paths PDB files out_dir Character, output directory prepared files, default \"./\" python_path Character, path Python executable, default \"python\" prepare_script Character, path prepare_receptor4.py script add_opts Character, additional options pass prepare_receptor4.py, default \"-hydrogens -e True\"","code":""},{"path":"https://rightsz.github.io/xvm/reference/prepare_receptor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare receptor PDB files for molecular docking — prepare_receptor","text":"Character vector paths successfully prepared PDBQT files","code":""},{"path":"https://rightsz.github.io/xvm/reference/prepare_receptor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare receptor PDB files for molecular docking — prepare_receptor","text":"","code":"if (FALSE) { # \\dontrun{ pdbqt_files <- prepare_receptor(pdb_files,                                 out_dir = \"prepared\",                                 prepare_script = \"path/to/prepare_receptor4.py\") } # }"},{"path":"https://rightsz.github.io/xvm/reference/process_pdb_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Process PDB files for alternate location splitting — process_pdb_files","title":"Process PDB files for alternate location splitting — process_pdb_files","text":"Process PDB files alternate location splitting","code":""},{"path":"https://rightsz.github.io/xvm/reference/process_pdb_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process PDB files for alternate location splitting — process_pdb_files","text":"","code":"process_pdb_files(pdbs, out_dir, python_path, script_path, keep_label)"},{"path":"https://rightsz.github.io/xvm/reference/process_pdb_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process PDB files for alternate location splitting — process_pdb_files","text":"pdbs Character vector PDB file paths out_dir Output directory python_path Path Python executable script_path Path splitting script keep_label Label keep (default \"\")","code":""},{"path":"https://rightsz.github.io/xvm/reference/process_pdb_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process PDB files for alternate location splitting — process_pdb_files","text":"Character vector processed file paths","code":""},{"path":"https://rightsz.github.io/xvm/reference/run_vina.html","id":null,"dir":"Reference","previous_headings":"","what":"Run molecular docking with AutoDock Vina — run_vina","title":"Run molecular docking with AutoDock Vina — run_vina","text":"function runs molecular docking using AutoDock Vina.","code":""},{"path":"https://rightsz.github.io/xvm/reference/run_vina.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run molecular docking with AutoDock Vina — run_vina","text":"","code":"run_vina(   receptor = NULL,   ligand = NULL,   center = NULL,   size = NULL,   config_paths = NULL,   exhaustiveness = 8,   out = \"docked\",   logs = \"logs\",   vina_path = NULL,   seed = 12345,   cpu = NULL )"},{"path":"https://rightsz.github.io/xvm/reference/run_vina.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run molecular docking with AutoDock Vina — run_vina","text":"receptor Path receptor PDBQT file (direct mode) ligand Path ligand PDBQT file (direct mode) center Numeric vector length 3 box center (x,y,z) (direct mode) size Numeric vector length 3 box size (x,y,z) (direct mode) config_paths Character vector paths config files directories containing config files exhaustiveness Integer, search intensity, default 8 (direct mode) Character, output directory docked files, default \"docked\" logs Character, output directory log files, default \"logs\" vina_path Character, path vina executable, default NULL seed Integer, random seed reproducibility, default 12345 cpu Integer, number CPU cores use parallel computation, default NULL (auto-detect)","code":""},{"path":"https://rightsz.github.io/xvm/reference/run_vina.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run molecular docking with AutoDock Vina — run_vina","text":"","code":"if (FALSE) { # \\dontrun{ # Run molecular docking using AutoDock Vina run_vina(   config_paths = \"configs\",   out = \"docked\",   logs = \"logs\" ) } # }"},{"path":"https://rightsz.github.io/xvm/reference/split_pdb_with_script.html","id":null,"dir":"Reference","previous_headings":"","what":"Split PDB file with external Python script — split_pdb_with_script","title":"Split PDB file with external Python script — split_pdb_with_script","text":"Split PDB file external Python script","code":""},{"path":"https://rightsz.github.io/xvm/reference/split_pdb_with_script.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split PDB file with external Python script — split_pdb_with_script","text":"","code":"split_pdb_with_script(   pdb_file,   out_dir,   stem,   python_path,   script_path,   out_file,   keep_label )"},{"path":"https://rightsz.github.io/xvm/reference/split_pdb_with_script.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split PDB file with external Python script — split_pdb_with_script","text":"pdb_file Path PDB file out_dir Output directory stem File stem name python_path Path Python executable script_path Path splitting script out_file Expected output file path keep_label Label keep","code":""},{"path":"https://rightsz.github.io/xvm/reference/split_pdb_with_script.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split PDB file with external Python script — split_pdb_with_script","text":"Character vector path processed file successful","code":""},{"path":"https://rightsz.github.io/xvm/reference/trim_receptor.html","id":null,"dir":"Reference","previous_headings":"","what":"Trim receptor PDB files to keep only protein atoms — trim_receptor","title":"Trim receptor PDB files to keep only protein atoms — trim_receptor","text":"Trim receptor PDB files keep protein atoms","code":""},{"path":"https://rightsz.github.io/xvm/reference/trim_receptor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trim receptor PDB files to keep only protein atoms — trim_receptor","text":"","code":"trim_receptor(input_paths, output_dir = \"trimmed\")"},{"path":"https://rightsz.github.io/xvm/reference/trim_receptor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trim receptor PDB files to keep only protein atoms — trim_receptor","text":"input_paths Character vector file paths directories containing PDB files output_dir Character string specifying output directory, default \"trimmed\"","code":""},{"path":"https://rightsz.github.io/xvm/reference/trim_receptor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trim receptor PDB files to keep only protein atoms — trim_receptor","text":"Character vector paths trimmed PDB files","code":""},{"path":"https://rightsz.github.io/xvm/reference/trim_receptor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trim receptor PDB files to keep only protein atoms — trim_receptor","text":"","code":"if (FALSE) { # \\dontrun{ trim_receptor(\"./test/1a7c.pdb\") trim_receptor(c(\"./test/1a7c.pdb\", \"./test/1abc.pdb\"), output_dir = \"my_output\") trim_receptor(\"./test\", output_dir = \"processed\") } # }"},{"path":"https://rightsz.github.io/xvm/reference/write_configs.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate qvina or qvina-w config files for docking — write_configs","title":"Generate qvina or qvina-w config files for docking — write_configs","text":"Generate qvina qvina-w config files docking","code":""},{"path":"https://rightsz.github.io/xvm/reference/write_configs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate qvina or qvina-w config files for docking — write_configs","text":"","code":"write_configs(   receptor_paths,   ligand_paths,   box_df,   out_dir = \"configs\",   exhaustiveness = 8 )"},{"path":"https://rightsz.github.io/xvm/reference/write_configs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate qvina or qvina-w config files for docking — write_configs","text":"receptor_paths Character vector, full paths receptor PDBQT files ligand_paths Character vector, full paths ligand PDBQT files box_df Data.frame generated calculate_box(), must contain columns: file (basename without path), center_x/center_y/center_z, size_x/size_y/size_z out_dir Output directory configuration files exhaustiveness Integer, search intensity, default 8","code":""},{"path":"https://rightsz.github.io/xvm/reference/write_configs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate qvina or qvina-w config files for docking — write_configs","text":"","code":"All written configuration file paths (invisible return)"},{"path":"https://rightsz.github.io/xvm/reference/write_configs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate qvina or qvina-w config files for docking — write_configs","text":"","code":"if (FALSE) { # \\dontrun{ # Create configuration files for docking config_files <- write_configs(   receptor_paths = receptor_pdbqt,   ligand_paths = ligand_pdbqt,   box_df = box_params,   out_dir = \"configs\" ) } # }"}]
